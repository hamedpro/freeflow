definitions : 
    unit : each time saying unit it means a pack or resource or note or task or a event 
    * only notice that events can not have a parent pack_id and may they also differ in other cases 


collaboration system : 
    concept
        every note or task or resource or pack has a 
        number of users as its "collaborators" and we
        call all other users "others". 
        
        only one of collaborators is "owner".

        each pack or note or task or resource has a "rules"
        value which clarify exact privileges of
        each user whether that user is owner or another
        collaborator or considered as "others".

        this value ('rules') also saves other fields like the percentage of
        approval required to accept an incoming change suggesstion and fields like this.

    implementation
        each task or resource or note or pack is saved as a js object (called document) in mongodb 
        this object has a collaborators field with type of "array" which includes objects in this shape : 
        {user_id : <24 digit hex mongodb _id> , is_owner : boolean  }

        also it has another field "rules":
        todo complete here
lock system :
    concept
        we allow each unit to have more than 1 collaborator
        and all of them may have privilege to write something in that.
        so this can lead to conflicts and to avoid this we don't allow
        simultaneous changes to a single unit .

        to do this we lock each unit for a specific duration when someone wants
        to write in it. in this duration only that user can write to that unit.

        this user can then request a lock again if wants to continue working on that unit.
    implementation 
        to lock a file for yourself it's required to request a lock :

        request : 
            POST <api_endpoint>/locks
            Content-Type : application/json

            {
                unit_context : "packs" | "resources" | "notes" | "tasks",
                unit_id : "BlahBlah",
                duration : x (must be s)
            }

        response :
            Content-Type : application/json

            that lock document is returned :
            {
                _id : string,
                lock_start_time : string ,
                lock_end_time : string ,
                user_id : string ,
                unit_context : string ,
                unit_id : string 
            }

        by making this request a new document is created in locks collection and 
        its just like shown response . 
        
        in frontend use this lock_end_time to show user how much
        of his lock time is remained and when it reaches 2 min ask user if wants to 
        extend lock time or not. if true request a new lock and update the timer.

        each lock duration is 7 min 

        a lock can also be released when user exits editing mode or by pressing a button.

messages specification : 
    concept:
        each unit has a messages box which works just like a group chat between colaborators of that unit
        but special thing about that is every unit also shows messages of all its nested childrens by default 
    implementation:
    we have a messages collection which its documents look like this : 
    {
        submit_time : unix time stamp ,
        text : string ,
        user_id  : mongo db document id ,
        replay_parent : (undefined | null ) | message document id,
        unit_context : packs | tasks | events | notes | resources,
        unit_id : mongodb doc id   
    }

    new message : post <api_endpoint>/v2/messages <- json stringified object 
    get messages : get <api_endpoint>/v2/messages -> json stringified array 



